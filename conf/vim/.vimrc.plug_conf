" Pluginの追加設定

" =====================================================================
" 通常vimモーションの強化系
" =====================================================================
" easymotion/vim-easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys='sfjkdawh'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_disable_two_key_combo = 1
nnoremap s <Plug>(clever-f-reset)<Plug>(easymotion-s2)
nnoremap <Leader><Leader>s <Plug>(clever-f-reset)<Plug>(easymotion-sn)
nnoremap <Leader>w <Plug>(easymotion-overwin-w)

" haya14busa/vim-edgemotion
nnoremap <C-j> <Plug>(edgemotion-j)<Plug>(anchor)
nnoremap <C-k> <Plug>(edgemotion-k)<Plug>(anchor)

" rhysd/clever-f.vim
let g:clever_f_smart_case = 1
let g:clever_f_timeout_ms = 1500
let g:clever_f_highlight_timeout_ms = 1500

" t9md/vim-quickhl
" haya14busa/vim-asterisk
nnoremap # <Plug>(asterisk-z*)<Plug>(quickhl-manual-this)
nnoremap <silent><Leader>q <Plug>(quickhl-manual-reset)<Plug>(clever-f-reset):noh<CR>

" yuttie/comfortable-motion.vim
" ホバードキュメントのスクロール用に、デフォルトマップを無効化
let g:comfortable_motion_no_default_key_mappings = 1
nnoremap <silent><C-f> :<C-u>cal comfortable_motion#flick(200)<CR>
nnoremap <silent><C-b> :<C-u>cal comfortable_motion#flick(-200)<CR>

" voldikss/vim-floaterm
set termwinkey=<C-e>
" normalモードへ移行
tnoremap <C-x> <C-w><S-n>
" 単語削除
tnoremap <C-w> <Esc><BS>
tnoremap <silent><C-t> <C-\><C-n>:FloatermNew<CR>
tnoremap <silent><S-Tab> <C-\><C-n>:FloatermNext<CR>
let g:floaterm_keymap_toggle = '<F12>'
let g:floaterm_width = 0.6
let g:floaterm_height = 1.2
let g:floaterm_position = 'bottomright'

" =====================================================================
" 外観
" =====================================================================
" mhinz/vim-startify
" ぼっちざろっく{{{
let s:btr_logo = [
    \'                                                                                                                                  dN',
    \'                                                                                                  ..                             JMF',
    \'                                                                                             ..gMMMM%                           JMF',
    \'                                                                                           .MM9^ .MF                           (MF',
    \'                                                                                  .(,      ("   .M#                  .g,      .MF',
    \'                            .,  dN                                             gg,,M@          .M#                  .M#!      (M>',
    \'                            JM} M#             .MNgg.                     .g,  ?M[ 7B         .MMg+gg,.           .MM"        ."',
    \'                    ...gNMN,.Mb MN           .gMM9!                      .(MN,  .=           .MMM9=  ?MN,         (WN,      .MM ',
    \'       jN-      ..gMMN#!     (Mp(M}       .+MMYMF                    ..kMMWM%               ,M#^       dN.          .WNJ,   JM',
    \'       MM     .MM9^  dN,                 dNB^ (M%                   ?M"!  ,M\        .,               .M#   .&MMMN,    ?"   M#',
    \'       MN            .MN#^                    dM:  ..(J-,                 ,B         .TM             .M#   ,M@  .MF',
    \'       MN.       ..MMBMN_                     dN_.MM@"!?MN.   TMm     .a,                           (M@         MM^',
    \'       MN.     .MM"  JMb....       ..        dMMM=     .Mb            ?HNgJ..,                   .MM^',
    \'       dM{          -MMM#7"T""   .dN#TMo       ?      .MM^                 ?!                 +gM#=',
    \'       (M]         .MN(N#       .M@  .MF              .MM^                                      ~',
    \'       .MN          ?"""             MM!            .MMD',
    \'        ?N[                                         7"',
    \'         TMe',
    \'          ?MN,',
    \'            TMNg,'
    \]
"}}}
let g:startify_custom_header = s:btr_logo

" vim-airline/vim-airline
let g:airline_theme = 'onedark'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_highlighting_cache = 1

" junegunn/goyo.vim
au! User GoyoEnter nested set number | colorscheme codedark
au! User GoyoLeave nested cal s:colorscheme_onedark()
nnoremap <silent><Leader>z :Goyo<CR>

" machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration = 300

" liuchengxu/vim-which-key
nnoremap <silent><Leader> :WhichKey '<Space>'<CR>
set timeoutlen=500

" joshdick/onedark.vim
fu! s:del_color() abort
    aug onedark_comment
        au!
    aug END
endf
fu! s:colorscheme_onedark() abort
    if !glob('~/.vim/plugged/onedark.vim')->empty()
        aug onedark_comment
            au!
            " コメント色
            au ColorScheme * hi Comment term=bold ctermfg=245 guifg=#5C6370
            " 背景なし
            au ColorScheme * hi Normal ctermbg=none
            " 行番号
            au ColorScheme * hi LineNr ctermfg=245
            au ColorScheme * hi CursorLineNr ctermfg=245
            " カーソル
            au ColorScheme * hi CursorLine ctermbg=236
            au ColorScheme * hi CursorColumn ctermbg=236
            au ColorScheme * hi Visual ctermbg=240
        aug END
        colorscheme onedark
        cal timer_start(2000, { -> s:del_color() })
    endif
endf
cal s:colorscheme_onedark()

" =====================================================================
" ファイラ / エクスプローラ
" =====================================================================
" junegunn/fzf
" junegunn/fzf.vim
let $FZF_PREVIEW_PREVIEW_BAT_THEME = 'TwoDark'
let g:fzf_preview_use_dev_icons = 1
nnoremap <silent><Leader>f :cal execute('CocCommand fzf-preview.'.(system('git rev-parse --is-inside-work-tree') =~ 'fatal'?'DirectoryFiles':'ProjectFiles'))<CR>
nnoremap <silent><Leader>b :CocCommand fzf-preview.Buffers<CR>
nnoremap <silent><Leader>h :CocCommand fzf-preview.MruFiles<CR>
nnoremap <silent><Leader>e :CocCommand explorer --width 30<CR>
nnoremap <silent><Leader>s :CocCommand fzf-preview.Lines<CR>
nnoremap <silent><Leader>m :CocCommand fzf-preview.Bookmarks<CR>
nnoremap <silent><Leader>nn :CocCommand fzf-preview.MemoList<CR>
nnoremap <silent><Leader>ng :CocCommand fzf-preview.MemoListGrep .<CR>
" プロジェクトgrep + fzf
fu! s:fzfgrep() abort
    let w = input('ripgrep [word]>>', expand('<cword>'))
    execute('CocCommand fzf-preview.ProjectGrep '.w)
endf
nnoremap <silent><Leader><Leader>g :<C-u>cal <SID>fzfgrep()<CR>
if !glob('~/.vim/plugged/coc.nvim')->empty()
    au DirChanged * cal execute('CocCommand explorer --no-focus --width 30')
endif

" =====================================================================
" 視覚補助 可読性の強化
" =====================================================================
" junegunn/rainbow_parentheses.vim
if !glob('~/.vim/plugged/rainbow_parentheses.vim')->empty()
    au VimEnter * RainbowParentheses
endif

" preservim/vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_exclude_filetypes = ['help', 'coc-explorer', 'startify']
let g:indent_guides_auto_colors = 0
aug indent_guide
    au!
    au ColorScheme * hi IndentGuidesOdd ctermbg=102
    au ColorScheme * hi IndentGuidesEven ctermbg=103
aug END

" =====================================================================
" 入力補完強化
" =====================================================================
" matze/vim-move
let g:move_key_modifier_visualmode = 'C'

" jiangmiao/auto-pairs
let g:AutoPairsMapCh = 0

" =====================================================================
" LSP IDE
" =====================================================================
" neoclide/coc.nvim
let g:coc_global_extensions = [
    \ 'coc-fzf-preview',
    \ 'coc-snippets',
    \ 'coc-explorer',
    \ 'coc-vimlsp',
    \ 'coc-sh',
    \ 'coc-json',
    \ 'coc-sql',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-tsserver',
    \ 'coc-clangd',
    \ 'coc-pyright',
    \ 'coc-rust-analyzer',
    \ 'coc-go',
    \ 'coc-java',
\ ]

" ホバー待機でハイライト
if !glob('~/.vim/plugged/coc.nvim')->empty()
    au CursorHold * sil cal CocActionAsync('highlight')
endif

" TODO タブで空白入力されてしまう
" cocからの補完の選択と展開
inoremap <silent><expr><Tab> coc#pum#visible() ? coc#pum#next(1) : '<Tab>'
inoremap <silent><expr><S-Tab> coc#pum#visible() ? coc#pum#prev(1) : '<S-Tab>'
inoremap <silent><expr><CR> coc#pum#visible() ? coc#pum#confirm() : pumvisible() ? '<C-y>' : '<CR>'

" TODO タブで空白入力されてしまう
" スニペットの選択と展開
let g:coc_snippet_next = '<Tab>'
let g:coc_snippet_prev = '<S-Tab>'
inoremap <C-s> <Plug>(coc-snippets-expand)

" 現在行のトリガ文言をnormalモードで展開
fu! s:expand_snippet() abort
    cal feedkeys("A\<C-s>\<Esc>", 'x')
endf
nnoremap <silent><Leader>t :<C-u>cal <SID>expand_snippet()<CR>

" IDE系
" 定義元
nnoremap <Leader>d <Plug>(coc-definition)
" 参照元
nnoremap <silent><Leader>r :CocCommand fzf-preview.CocReferences<CR>
" リネーム
nnoremap <silent><Leader>R <Plug>(coc-rename)
" フォーマット
nnoremap <silent><Leader>F :<C-u>cal CocActionAsync('format')<CR>
" エラー移動
nnoremap <Leader>, <plug>(coc-diagnostic-next)
nnoremap <Leader>. <plug>(coc-diagnostic-prev)
" ホバードキュメント
nnoremap <silent><Leader>? :cal CocAction('doHover')<CR>
" ホバードキュメントのスクロール
nnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : comfortable_motion#flick(100)
nnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : comfortable_motion#flick(-100)

" バッファ再読み込み (LSP再起動)
fu! s:reload_buffer() abort
    w
    e!
    echo 'Reload Buffer'
endf
nnoremap <silent><Leader>l :<C-u>cal <SID>reload_buffer()<CR><Esc>
" cocサーバ再起動 これやるとCocExplorerが固まるのでお勧めしない
nnoremap <silent><Leader><Leader>l :<C-u>:CocRestart<CR><Esc>

" puremourning/vimspector
let g:vimspector_base_dir=$HOME.'/.vim/plugged/vimspector'
let g:vimspector_sign_priority = {
    \'vimspectorBP':          99,
    \'vimspectorBPCond':      99,
    \'vimspectorBPLog':       99,
    \'vimspectorBPDisabled':  99,
    \'vimspectorNonActivePC': 99,
    \'vimspectorPC':          999,
    \'vimspectorPCBP':        999,
    \ }
" ブレークポイント トグル
nnoremap <F9> <Plug>VimspectorToggleBreakpoint
" ブレークポイント 全消し
nnoremap <S-F9> :<C-u>cal vimspector#ClearBreakpoints()<CR>

" デバッグ開始/ 次のブレークポイントまで進む
nnoremap <F5> <Plug>VimspectorContinue
" デバッグモード終了
nnoremap <S-F5> :VimspectorReset<CR>

" 再度、あたまからデバッグ
nnoremap <F4> <Plug>VimspectorRestart

" ステップオーバー
nnoremap <F10> <Plug>VimspectorStepOver

" ステップイン / ステップアウト
nnoremap <F11> <Plug>VimspectorStepInto
nnoremap <S-F11> <Plug>VimspectorStepOut

" カーソルの変数を監視登録
nnoremap <F3> :cal execute('VimspectorWatch '.expand('<cword>'))<CR>

" カーソルの変数の値を表示
nnoremap <Leader>_ <Plug>VimspectorBalloonEval

" =====================================================================
" その他
" =====================================================================
" Exafunction/codeium.vim
" 認証のために以下URLへのアクセスが必要
" Codeium Authコマンドで出るリンクからのクリックだと、画面表示幅の問題でフルパスに飛べないことがあるので注意
" https://www.codeium.com/profile?response_type=token&redirect_uri=vim-show-auth-token&state=a&scope=openid%20profile%20email&redirect_parameters_type=query
let g:codeium_disable_bindings = 1
inoremap <silent><C-n> <Cmd>call codeium#CycleCompletions(1)<CR>
inoremap <silent><C-p> <Cmd>call codeium#CycleCompletions(-1)<CR>
inoremap <script><silent><nowait><expr><C-i> codeium#Accept()

